---
alwaysApply: true
---

# SwiftUI MVVM 架构规则

## 项目结构

### 目录结构
```
Models/          // 数据模型
ViewModels/      // 视图模型  
Views/          // SwiftUI视图
Services/       // 业务逻辑服务
Utils/          // 工具类
```
## 文件命名规范

### 业务文件命名
- **View**：`[功能]View.swift`
- **ViewModel**：`[功能]VM.swift`
- **Service**：`[功能]Service.swift`
- **Model**：`[业务概念].swift`

### 组件文件命名
- **UI组件**：`[功能][类型].swift`
- **工具类**：`[功能][类型].swift`
- **扩展**：`[类型]+[功能].swift`

## MVVM 架构规范

### 1. Models (数据模型)
- 纯数据结构，不包含业务逻辑
- 使用 `@Model` 用于 SwiftData
- 只包含属性，不包含方法

### 2. ViewModels (视图模型)
- 处理业务逻辑，管理状态
- 使用 `@Observable` 或 `ObservableObject`
- 包含 `@Published` 属性用于状态管理
- 不直接引用视图
- **禁止使用单例模式** (`shared` 静态实例)

### 3. Views (视图)
- 纯UI展示，不包含业务逻辑
- 通过 `@State` 和 `@Bindable` 管理状态
- 使用 ViewModel 处理业务逻辑

## ViewModel 实例化策略

### 推荐方式
1. **按需创建**：每个视图创建独立的ViewModel实例
2. **依赖注入**：通过 `.environment()` 传递ViewModel
3. **生命周期管理**：
   - 短期：使用 `@State` 管理
   - 长期：使用 `@Environment` 或 `@StateObject`

### 禁止方式
- ❌ 使用 `static let shared` 单例模式
- ❌ 在ViewModel中创建全局状态
- ❌ 跨业务共享ViewModel实例

### 业务级ViewModel共享规则
- ✅ **同一业务流程内**：可以共享ViewModel实例
- ✅ **业务连续性**：如录制流程（主界面→倒计时→录制界面）
- ❌ **跨业务模块**：不同业务必须使用独立实例

### 正确示例
```swift
// ✅ 正确：按需创建（不同业务）
@State private var viewModel = ItemViewModel()

// ✅ 正确：依赖注入
.environment(ItemViewModel())

// ✅ 正确：业务内共享（同一业务流程）
struct MainView: View {
    @State private var recordingVM = FlightRecordingVM()
    // 传递给同业务的其他视图
    RecordingActiveView(viewModel: recordingVM)
}

// ❌ 错误：单例模式
// static let shared = ItemViewModel() // 禁止
```

## 数据流
View → ViewModel → Service → Model

## 禁止事项
- 在View中直接处理业务逻辑
- 在Model中包含业务逻辑
- 在ViewModel中直接操作UI
- 在View中直接访问数据库
- 使用单例模式创建ViewModel
- 在Model中包含业务逻辑
- 在ViewModel中直接操作UI
- 在View中直接访问数据库