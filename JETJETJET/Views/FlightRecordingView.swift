import SwiftUI
import SwiftData
import SceneKit

struct FlightRecordingView: View {
    @Environment(\.modelContext) private var modelContext
    @State private var viewModel = FlightRecordingVM()
    @State private var airplane3DModel = Airplane3DModel()
    
    var body: some View {
        NavigationStack {
            VStack(spacing: 20) {
                // Ê†áÈ¢ò
                Text("JET!")
                    .font(.largeTitle)
                    .fontWeight(.bold)
                
                // Áä∂ÊÄÅÊåáÁ§∫Âô®
                StatusIndicatorView(
                    isRecording: viewModel.isRecording,
                    isCountingDown: viewModel.isCountingDown,
                    countdownValue: viewModel.countdownValue
                )

                // ÂÄíËÆ°Êó∂ÊòæÁ§∫
                if viewModel.isCountingDown {
                    CountdownView(countdownValue: viewModel.countdownValue)
                }
                // ‰º†ÊÑüÂô®Êï∞ÊçÆÊòæÁ§∫
                else if let snapshot = viewModel.currentSnapshot {
                    SensorDataView(snapshot: snapshot)
                        .onAppear {
                            updateAirplaneAttitude()
                        }
                        .onChange(of: snapshot) {
                            updateAirplaneAttitude()
                        }
                } else if !viewModel.isCountingDown {
                    Text("Á≠âÂæÖ‰º†ÊÑüÂô®Êï∞ÊçÆ...")
                        .foregroundColor(.secondary)
                        .padding()
                }
                
                // ÂΩïÂà∂Êó∂Èïø
                if viewModel.isRecording {
                    Text("ÂΩïÂà∂Êó∂Èïø: \(viewModel.formattedDuration())")
                        .font(.headline)
                        .foregroundColor(.blue)
                }
                
                // 3DÈ£ûÊú∫Ê®°ÂûãÊòæÁ§∫
                Airplane3DSceneView(
                    airplane3DModel: airplane3DModel,
                    height: 200,
                    showControls: true
                )

                Spacer()
                
                // ÂΩïÂà∂ÊéßÂà∂ÊåâÈíÆ
                RecordingControlButton(
                    isRecording: viewModel.isRecording,
                    isCountingDown: viewModel.isCountingDown,
                    onStart: { viewModel.startRecording() },
                    onStop: { viewModel.stopRecording() }
                )

                // ‰ΩøÁî®ÊèêÁ§∫
                if !viewModel.isRecording && !viewModel.isCountingDown {
                    Text("üí° Â∞ÜÊâãÊú∫È°∂ÈÉ®ÂØπÁùÄÈ£ûÊú∫Â§¥ÊñπÂêëÔºåÂπ≥ÊîæÂú®Ê°åÂ≠ê‰∏äÂºÄÂßãÂΩïÂà∂")
                        .font(.caption)
                        .foregroundColor(.secondary)
                        .multilineTextAlignment(.center)
                        .padding(.horizontal)
                } else if viewModel.isCountingDown {
                    Text("üì± ËØ∑Â∞ÜÊâãÊú∫Âπ≥ÊîæÂú®Ê°åÂ≠ê‰∏ä\nÊâãÊú∫È°∂ÈÉ®ÂØπÁùÄÈ£ûÊú∫Â§¥ÊñπÂêë")
                        .font(.caption)
                        .foregroundColor(.orange)
                        .multilineTextAlignment(.center)
                        .padding(.horizontal)
                }
                
                // ÈîôËØØ‰ø°ÊÅØ
                if let errorMessage = viewModel.errorMessage {
                    Text(errorMessage)
                        .foregroundColor(.red)
                        .padding()
                }
                
                Spacer()
            }
            .padding()
            .toolbar {
                ToolbarItem(placement: .navigationBarTrailing) {
                    NavigationLink(destination: FlightHistoryView()) {
                        Image(systemName: "clock.arrow.circlepath")
                    }
                }
            }
        }
        .onAppear {
            viewModel.setModelContext(modelContext)
        }
    }
    
    private func updateAirplaneAttitude() {
        guard let snapshot = viewModel.currentSnapshot else { return }
        airplane3DModel.updateAirplaneAttitude(pitch: snapshot.pitch, roll: snapshot.roll, yaw: snapshot.yaw)
    }
}

// Áä∂ÊÄÅÊåáÁ§∫Âô®ÁªÑ‰ª∂
struct StatusIndicatorView: View {
    let isRecording: Bool
    let isCountingDown: Bool
    let countdownValue: Int

    var body: some View {
        HStack {
            Circle()
                .fill(statusColor)
                .frame(width: 12, height: 12)
                .scaleEffect(isRecording || isCountingDown ? 1.2 : 1.0)
                .animation(.easeInOut(duration: 0.5).repeatForever(autoreverses: true), value: isRecording || isCountingDown)

            Text(statusText)
                .font(.headline)
                .foregroundColor(statusColor)
        }
    }

    private var statusColor: Color {
        if isCountingDown {
            return .orange
        } else if isRecording {
            return .red
        } else {
            return .secondary
        }
    }

    private var statusText: String {
        if isCountingDown {
            return "ÂáÜÂ§áÂΩïÂà∂"
        } else if isRecording {
            return "Ê≠£Âú®ÂΩïÂà∂"
        } else {
            return "ÂæÖÊú∫‰∏≠"
        }
    }
}

// ÂÄíËÆ°Êó∂ÊòæÁ§∫ÁªÑ‰ª∂
struct CountdownView: View {
    let countdownValue: Int

    var body: some View {
        VStack(spacing: 20) {
            Text("ÂÄíËÆ°Êó∂")
                .font(.headline)
                .foregroundColor(.orange)

            Text("\(countdownValue)")
                .font(.system(size: 80, weight: .bold, design: .rounded))
                .foregroundColor(.orange)
                .scaleEffect(1.2)
                .animation(.easeInOut(duration: 0.3), value: countdownValue)
        }
        .padding()
        .background(Color.orange.opacity(0.1))
        .cornerRadius(20)
    }
}

// ‰º†ÊÑüÂô®Êï∞ÊçÆÊòæÁ§∫ÁªÑ‰ª∂
struct SensorDataView: View {
    let snapshot: FlightDataSnapshot
    
    var body: some View {
        VStack(spacing: 15) {
            Text("ÂÆûÊó∂‰º†ÊÑüÂô®Êï∞ÊçÆ")
                .font(.headline)
                .padding(.bottom, 10)
            
            LazyVGrid(columns: [
                GridItem(.flexible()),
                GridItem(.flexible())
            ], spacing: 15) {
                DataCard(title: "ÈÄüÂ∫¶", value: String(format: "%.2f", snapshot.speed), unit: "m/s¬≤")
                DataCard(title: "‰øØ‰ª∞Ëßí", value: String(format: "%.1f", snapshot.pitch), unit: "¬∞")
                DataCard(title: "Ê®™ÊªöËßí", value: String(format: "%.1f", snapshot.roll), unit: "¬∞")
                DataCard(title: "ÂÅèËà™Ëßí", value: String(format: "%.1f", snapshot.yaw), unit: "¬∞")
            }
        }
        .padding()
        .background(Color(.systemGray6))
        .cornerRadius(12)
    }
}

// Êï∞ÊçÆÂç°ÁâáÁªÑ‰ª∂
struct DataCard: View {
    let title: String
    let value: String
    let unit: String
    
    var body: some View {
        VStack {
            Text(title)
                .font(.caption)
                .foregroundColor(.secondary)
            Text(value)
                .font(.title2)
                .fontWeight(.semibold)
            Text(unit)
                .font(.caption2)
                .foregroundColor(.secondary)
        }
        .padding()
        .background(Color(.systemBackground))
        .cornerRadius(8)
    }
}

// ÂΩïÂà∂ÊéßÂà∂ÊåâÈíÆÁªÑ‰ª∂
struct RecordingControlButton: View {
    let isRecording: Bool
    let isCountingDown: Bool
    let onStart: () -> Void
    let onStop: () -> Void

    var body: some View {
        Button(action: {
            if isRecording || isCountingDown {
                onStop()
            } else {
                onStart()
            }
        }) {
            HStack {
                Image(systemName: buttonIcon)
                    .font(.title2)
                Text(buttonText)
                    .font(.headline)
            }
            .foregroundColor(Color(.systemBackground))
            .padding(.horizontal, 30)
            .padding(.vertical, 15)
            .background(buttonColor)
            .cornerRadius(25)
        }
    }

    private var buttonIcon: String {
        if isCountingDown {
            return "xmark.circle.fill"
        } else if isRecording {
            return "stop.circle.fill"
        } else {
            return "record.circle"
        }
    }

    private var buttonText: String {
        if isCountingDown {
            return "ÂèñÊ∂à"
        } else if isRecording {
            return "ÂÅúÊ≠¢ÂΩïÂà∂"
        } else {
            return "ÂºÄÂßãÂΩïÂà∂"
        }
    }

    private var buttonColor: Color {
        if isCountingDown {
            return .orange
        } else if isRecording {
            return .red
        } else {
            return .blue
        }
    }
}

#Preview {
    FlightRecordingView()
        .modelContainer(for: FlightData.self, inMemory: true)
}
